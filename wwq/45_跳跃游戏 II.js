// 给定一个非负整数数组，你最初位于数组的第一个位置。
// 数组中的每个元素代表你在该位置可以跳跃的最大长度。
// 你的目标是使用最少的跳跃次数到达数组的最后一个位置。

var jump = function(nums) {
  var ans = 0;
  var end = 0;
  var maxPos = 0;
  for (var i = 0; i < nums.length - 1; i++) {
    maxPos = Math.max(nums[i] + i, maxPos);
    if (i == end) {
      end = maxPos;
      ans++;
    }
  }
  return ans;
};
// [2,3,1,1,4]
// 题解：
/**
 * 先循环，没问题
 * 然后找到第一个最长可以跳转的最大边界数，也就是2，然后把它记录下来，这算是一个跳跃所以增加1
 * 接着下一次循环到之前记录结尾的时候，判断期间那个值最大，现在也就是到了nums[2]=1这个位置，之前总共走了两次，分别是 3和1，由于3大，所以可以直接跳3，
 * 然后计算下一个边界值为当前下标加上他的值
 */
